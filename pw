#!/usr/bin/env bash

pw_len=40                                         # Password length
urandom_bytes=20000                               # More data = longer password list
letters='A-HJ-KM-NP-Za-km-z'                      # Default characters to include in passwords: letters, numbers, symbols
numbers='1-9'                                     # Default is designed not to include characters Il0O
symbols='!?*^_@#%^&*()=+<>}{][;:",./|~\\'\''`-'   # If dash "-" is needed, put it at the end
characters="$letters$numbers$symbols"             #
regex_match_flags="^-(b|-bytes=|c|-characters=|l|-length=)$"

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo "pw - generate passwords"
      echo " "
      echo "pw [options]"
      echo " "
      echo "options:"
      echo "-h       ,  --help               Show brief help"
      echo "-b NUM   ,  --bytes=NUM          Specify bytes to read from /dev/urandom. Defaults to $urandom_bytes bytes"
      echo "-c 'CHAR',  --characters='CHAR'  Specify allowed password characters. Defaults to '$characters'"
      echo "-l NUM   ,  --length=NUM         Specify password length. Defaults to length of $pw_len"
      echo " "
      echo "example: 20 character alphanumeric with symbols "'!?"*#-'" passwords list"
      echo " "
      echo "pw --bytes=20000 --characters='a-zA-Z0-9"'!?"*#-'"' --length=20"
      echo " or"
      echo "pw -b 20000 -c 'a-zA-Z0-9"'!?"*#-'"' -l 20"
      echo " "
      exit 0
      ;;
    -b)
      shift
      # Test that -b value (previously shifted $1) is gt 0 before setting var urandom_bytes
      if [ $1 -gt 0 ] 2> /dev/null; then
        urandom_bytes=$1
      else
          printf "error: \"-b NUM\" needs numeral greater that 0. Value > 1000 recommended\n"
          exit 1
      fi
      shift
      ;;
    --bytes*)
      # Test that --bytes value "${1/*"="/}" is gt 0 before setting var urandom_bytes
      if [[ "${1/*"="/}" -gt 0 ]] 2> /dev/null; then
        urandom_bytes="${1/*"="/}"
      else
        printf "error: usage \"--bytes=NUM\" needs numeral greater that 0. Value > 1000 recommended\n"
        exit 1
      fi
      shift
      ;;
    -l)
      shift
      # Test that -l value (previously shifted $1) is gt 0 before setting var pw_len
      if [ $1 -gt 0 ] 2> /dev/null; then
        pw_len=$1
      else
        printf "error: usage \"-l NUM\" (password length) needs numeral greater that 0\n"
        exit 1
      fi
      shift
      ;;
    --length*)
      # Test that --length value "${1/*"="/}" is gt 0 before setting var pw_len
      if [[ "${1/*"="/}" -gt 0 ]] 2> /dev/null; then
        pw_len="${1/*"="/}"
      else
        printf "error: usage \"--length=NUM\" (password length) needs numeral greater that 0\n"
        exit 1
      fi
      shift
      ;;
    -c)
      shift
      # Before set var characters, test for -c value (previously shifted $1) being blank,
      # or another flag shifted in as unintended -c value.
      if [[ ! -z $1 ]] && [[ ! "$1" =~ $regex_match_flags ]]; then
        characters="$1"
      else
        printf "error: usage \"-c 'CHARACTERS'\" (allowed password characters) needs value\n"
        exit 1
      fi
      shift
      ;;
    --characters*)
    # Before set var characters, test for --characters string "${1/*"="/}" being blank,
    # or another flag shifted in as unintended --characters string by checking 
    # $characters_to_check for regex match on $regex_match_flags.
    characters_to_check="${1/*"="/}"
      if [[ ! -z "${1/*"="/}" ]] && [[ ! "$characters_to_check" =~ $regex_match_flags ]]; then
        characters="${1/*"="/}"
      else
        printf "error: usage \"--characters 'CHARACTERS'\" (allowed password characters) needs value\n"
        exit 1
      fi
      shift
      ;;
    *)
      break
      ;;
  esac
done

                                # PW Generation
Perl_FindAndReplace="s/.{$pw_len}\K/\n/g"
head -c     "$urandom_bytes"      < /dev/urandom |
tr   -dc    "$characters"                        |
perl -pe    "$Perl_FindAndReplace"               |
head -n  -1
