#!/usr/bin/env bash
# Play 4 randomly selected videos that have widescreen format in mpv
# dependencies: mpv mediainfo bc
filetypes="mkv|mp4"         # Only match these filetypes
num_files=24                # Number random files for mpv pool
directory_depth=1           # How many directories deep to look for video files
resolution="1920:1080"       # Resolution of each wall segment

# Find matching files in current dir
files="$(find "$PWD" -maxdepth $directory_depth -type f -regextype posix-extended -iregex "^.*(\.$filetypes)$")"

# Pick count $num_files files at random
randomfiles="$(cat <<<"$files" | shuf -n $num_files)"

# Add random files to array
SAVEIFS=$IFS                # Save current IFS (Internal Field Separator)
IFS=$'\n'                   # Change IFS to newline char
randomfiles=($randomfiles)  # split the `to_kill` string into an array by the same name
IFS=$SAVEIFS                # Restore original IFS

# Get aspect ratio of videos
aspect_ratios="$(for (( i=0; i<${#randomfiles[@]}; i++ ))
do
    aspect_ratio="$(mediainfo --Inform="Video;%DisplayAspectRatio%" "${randomfiles[$i]}" )"
    echo $aspect_ratio ${randomfiles[$i]} 
done)"

horizontal_vids="$(echo "$aspect_ratios" | sort -g | perl -0777 -pe "s/^0\..*\n//gm" | perl -pe "s/^[^\/]+//g")"
vertical_vids="$(echo "$aspect_ratios" | sort -g | perl -0777 -pe "s/^[1-9]\..*\n//gm" | perl -pe "s/^[^\/]+//g" )"

# Convert vars to arrays
SAVEIFS=$IFS
IFS=$'\n'
vertical_vids=($vertical_vids)
horizontal_vids=($horizontal_vids)
IFS=$SAVEIFS

# Assign randomly selected vertical files to var
file1="${horizontal_vids[ $RANDOM % ${#horizontal_vids[@]} ]}"
file2="${horizontal_vids[ $RANDOM % ${#horizontal_vids[@]} ]}"
file3="${horizontal_vids[ $RANDOM % ${#horizontal_vids[@]} ]}"
file4="${horizontal_vids[ $RANDOM % ${#horizontal_vids[@]} ]}"

# Check if random selection is dupe of another random selection and if so, pick another at random
case "$file1" in
  "$file2" | "$file3" | "$file4" )
    file1="${horizontal_vids[ $RANDOM % ${#horizontal_vids[@]} ]}"
    echo "file1 check #1 was dupe"
    ;;
  * )
esac

case "$file2" in
  "$file1" | "$file3" | "$file4" )
    file2="${horizontal_vids[ $RANDOM % ${#horizontal_vids[@]} ]}"
    echo "file2 check #1 was dupe"
    ;;
  * )
esac

case "$file3" in
  "$file1" | "$file2" | "$file4" )
    file3="${horizontal_vids[ $RANDOM % ${#horizontal_vids[@]} ]}"
    echo "file3 check #1 was dupe"
    ;;
  * )
esac

case "$file4" in
  "$file1" | "$file2" | "$file3" )
    file4="${horizontal_vids[ $RANDOM % ${#horizontal_vids[@]} ]}"
    echo "file4 check #1 was dupe"
    ;;
  * )
esac

# Check if random selection is dupe of another random selection (2nd round) and if so, pick another at random
case "$file1" in
  "$file2" | "$file3" | "$file4" )
    file1="${horizontal_vids[ $RANDOM % ${#horizontal_vids[@]} ]}"
    echo "file1 check #2 was dupe"
    ;;
  * )
esac

case "$file2" in
  "$file1" | "$file3" | "$file4" )
    file2="${horizontal_vids[ $RANDOM % ${#horizontal_vids[@]} ]}"
    echo "file2 check #2 was dupe"
    ;;
  * )
esac

case "$file3" in
  "$file1" | "$file2" | "$file4" )
    file3="${horizontal_vids[ $RANDOM % ${#horizontal_vids[@]} ]}"
    echo "file3 check #2 was dupe"
    ;;
  * )
esac

case "$file4" in
  "$file1" | "$file2" | "$file3" )
    file4="${horizontal_vids[ $RANDOM % ${#horizontal_vids[@]} ]}"
    echo "file4 check #2 was dupe"
    ;;
  * )
esac

# Get length of files in miliseconds
file1_length=$(mediainfo --Inform="Video;%Duration%" "$file1")
file2_length=$(mediainfo --Inform="Video;%Duration%" "$file2")
file3_length=$(mediainfo --Inform="Video;%Duration%" "$file3")
file4_length=$(mediainfo --Inform="Video;%Duration%" "$file4")

# Remove decimal from miliseconds
file1_length=${file1_length%.*}
file2_length=${file2_length%.*}
file3_length=${file3_length%.*}
file4_length=${file4_length%.*}

# Save backup of file order for use in reasigning based on video length
original_file1="$file1"
original_file2="$file2"
original_file3="$file3"
original_file4="$file4"

# Assign video lengths to variables. First is longest, second is second longest, Etc.
first=$(  echo "$file1_length $file2_length $file3_length $file4_length" | tr ' ' '\n' | sort -rn | head -1 )
second=$( echo "$file1_length $file2_length $file3_length $file4_length" | tr ' ' '\n' | sort -rn | head -2 | tail -1 )
third=$(  echo "$file1_length $file2_length $file3_length $file4_length" | tr ' ' '\n' | sort -rn | head -3 | tail -1 )
fourth=$( echo "$file1_length $file2_length $file3_length $file4_length" | tr ' ' '\n' | sort -rn | head -4 | tail -1 )

# Assign longest video to $file1
case $first in
  "$file1_length")
    file1="$original_file1"
    new_file1_length=$file1_length
    ;;
  "$file2_length")
    file1="$original_file2"
    new_file1_length=$file2_length
    ;;
  "$file3_length")
    file1="$original_file3"
    new_file1_length=$file3_length
    ;;
  "$file4_length")
    file1="$original_file4"
    new_file1_length=$file4_length
    ;;
  *)
esac

# Assign 2nd longest video to $file2
case $second in
  "$file1_length")
    file2="$original_file1"
    new_file2_length=$file1_length
    ;;
  "$file2_length")
    file2="$original_file2"
    new_file2_length=$file2_length
    ;;
  "$file3_length")
    file2="$original_file3"
    new_file2_length=$file3_length
    ;;
  "$file4_length")
    file2="$original_file4"
    new_file2_length=$file4_length
    ;;
  *)
esac

# Assign 3rd longest video to $file3
case $third in
  "$file1_length")
    file3="$original_file1"
    new_file3_length=$file1_length
    ;;
  "$file2_length")
    file3="$original_file2"
    new_file3_length=$file2_length
    ;;
  "$file3_length")
    file3="$original_file3"
    new_file3_length=$file3_length
    ;;
  "$file4_length")
    file3="$original_file4"
    new_file3_length=$file4_length
    ;;
  *)
esac

# Assign 4th longest video to $file4
case $fourth in
  "$file1_length")
    file4="$original_file1"
    new_file4_length=$file1_length
    ;;
  "$file2_length")
    file4="$original_file2"
    new_file4_length=$file2_length
    ;;
  "$file3_length")
    file4="$original_file3"
    new_file4_length=$file3_length
    ;;
  "$file4_length")
    file4="$original_file4"
    new_file4_length=$file4_length
    ;;
  *)
esac

# Convert length miliseconds to length seconds
file1_seconds=$(echo "scale=0; $new_file1_length/1000" | bc)
file2_seconds=$(echo "scale=0; $new_file2_length/1000" | bc)
file3_seconds=$(echo "scale=0; $new_file3_length/1000" | bc)
file4_seconds=$(echo "scale=0; $new_file4_length/1000" | bc)

# Print length seconds and filenames
echo ""$file1_seconds"s $file1"
echo ""$file2_seconds"s $file2"
echo ""$file3_seconds"s $file3"
echo ""$file4_seconds"s $file4"

# Play with mpv in 1x1
#                  1x1
setsid >/dev/null 2>&1 </dev/null \
mpv \
--audio=no \
--autofit=20% \
--border=no \
--cache=yes \
--geometry=50%:50% \
--watch-later-options-clr \
"$file1" \
--external-file="$file2" \
--external-file="$file3" \
--external-file="$file4" \
--external-file="$file4" \
--lavfi-complex="[vid1]setpts=floor(PTS*24)/24,scale=$resolution:force_original_aspect_ratio=1,pad=$resolution:(ow-iw)/2:(oh-ih)/2[v1];
[vid2]setpts=floor(PTS*24)/24,scale=$resolution:force_original_aspect_ratio=1,pad=$resolution:(ow-iw)/2:(oh-ih)/2[v2];
[vid3]setpts=floor(PTS*24)/24,scale=$resolution:force_original_aspect_ratio=1,pad=$resolution:(ow-iw)/2:(oh-ih)/2[v3];
[vid4]setpts=floor(PTS*24)/24,scale=$resolution:force_original_aspect_ratio=1,pad=$resolution:(ow-iw)/2:(oh-ih)/2[v4];
[v1] [v2] hstack [t1];
[v3] [v4] hstack [t2];
[t1] [t2] vstack [vo]" 2>&1 >/dev/null & 


## Play with mpv in 1x1x1x1
#setsid >/dev/null 2>&1 </dev/null \
#mpv \
#--audio=no \
#--autofit=20% \
#--border=no \
#--cache=yes \
#--geometry=50%:50% \
#--watch-later-options-clr \
#"$file1" \
#--external-file="$file2" \
#--external-file="$file3" \
#--external-file="$file4" \
#--external-file="$file4" \
#--lavfi-complex="[vid1]setpts=floor(PTS*24)/24,scale=$resolution:force_original_aspect_ratio=1,pad=$resolution:(ow-iw)/2:(oh-ih)/2[v1];
#[vid2]setpts=floor(PTS*24)/24,scale=$resolution:force_original_aspect_ratio=1,pad=$resolution:(ow-iw)/2:(oh-ih)/2[v2];
#[vid3]setpts=floor(PTS*24)/24,scale=$resolution:force_original_aspect_ratio=1,pad=$resolution:(ow-iw)/2:(oh-ih)/2[v3];
#[vid4]setpts=floor(PTS*24)/24,scale=$resolution:force_original_aspect_ratio=1,pad=$resolution:(ow-iw)/2:(oh-ih)/2[v4];
#[v1] [v2] hstack [t1];
#[v3] [v4] hstack [t2];
#[t1] [t2] hstack [vo]" 2>&1 >/dev/null & 
