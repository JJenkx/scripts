#!/usr/bin/env bash
# Convert webp to jpg if static or gif/mp4 if animated
# Pads animated webp to avoid "libx264 not divisible by 2 error"
# Deps imagemagick libwebp parallel

# Usage assuming saved as convertwebp
# convertwebp             # Will convert all webp in current dir to jpeg or mp4 and gif if animated
# convertwebp /some/dir/  # Same but on specified dir
# convertwebp /some/file  # Same but on specified file


JPG_SUFFIX="_percent.jpg"
#           Set jpg quality. There will be 2 outputs one of each quality setting
#           0-100 percent
QUALITY_ONE=35
QUALITY_TWO=75


find_args=(-maxdepth 1 -type f -regextype posix-extended -iregex '.*\.(webp)$')

DIR="$PWD/"
# If directory specified, add "/" to end of path of needed
if [[ -d "$@" ]]; then
    if [[ "$@" != */ ]]; then
        DIR="$@/"
    else
        DIR="$@"
    fi
    echo "DIR $DIR"
else
    if [[ -f "$@" ]]; then
        DIR="$@"
        echo "File $DIR"
    fi
fi

filelist="$(  find "$DIR" "${find_args[@]}"  )"

# Convert filelist to array
SAVEIFS=$IFS
IFS=$'\n'
filelist=($filelist)
IFS=$SAVEIFS

# Get files that haven't been converted by checking for converted files
to_convert="$( 
  for (( i=0; i<${#filelist[@]}; i++ )); do
    webp_basename="${filelist[$i]%.webp}"
    if [[ ( ! -e "$webp_basename"_"$QUALITY_ONE""$JPG_SUFFIX" || ! -e "$webp_basename"_"$QUALITY_TWO""$JPG_SUFFIX" ) 
    && ( ! -e "$webp_basename".gif || ! -e "$webp_basename".mp4 ) ]]; then
      echo "${filelist[$i]}"
    fi
  done
)"

# Check if there are files to convert
if [ -z "$to_convert" ]; then
  echo "There are no new files to process"
  exit 1
fi

echo "Processing: "$(wc -l <<< "$to_convert")" files"

# Export vars needed for parallel
export DIR
export JPG_SUFFIX
export QUALITY_ONE
export QUALITY_TWO

# Run conversion with parallel
cat <<< "$to_convert" | parallel -j+0 --eta --bar '
jpg_out_quality_one=$(echo "$DIR"{/.}_"$QUALITY_ONE""$JPG_SUFFIX")
jpg_out_quality_two=$(echo "$DIR"{/.}_"$QUALITY_TWO""$JPG_SUFFIX")
png_out=$(echo "$DIR"{/.}.ffmpeg.png)
gif_out=$(echo "$DIR"{/.}.gif)
mp4_out=$(echo "$DIR"{/.}.mp4)

info="$(  webpmux -info '{}'  )"

isanimated="$(  grep animation <<< "$info"  )"

if [[ "$isanimated" == "Features present: animation transparency" ]]; then

    convert '{}' "$gif_out"

    # Begin mp4 conversion handler to pad geometry 1 pixel to x and y if either 
    # are odd to avoid "libx264 not divisible by 2 error"

    geometry_x=$(  cat <<< "$info" | head -n 1 | tr "[:space:]" "\n" | tail -3 | head -n 1  )
    geometry_y=$(  cat <<< "$info" | head -n 1 | tr "[:space:]" "\n" | tail -3 | tail -1  )

    if [ $((geometry_x % 2)) -ne 0 ] && [ $((geometry_y % 2)) -ne 0 ]; then
        splice_geometry="1x1"
        gravity_direction="northeast"
    elif [ $((geometry_x % 2)) -ne 0 ]; then
        splice_geometry="1x0"
        gravity_direction="east"
    elif [ $((geometry_y % 2)) -ne 0 ]; then
        splice_geometry="0x1"
        gravity_direction="north"
    else
        convert '{}' "$mp4_out"
        exit
    fi
    convert -splice $splice_geometry -gravity $gravity_direction '{}' "$mp4_out"
    # End mp4 conversion handler

else

    dwebp '{}' -o - | convert - -quality $QUALITY_ONE% "$jpg_out_quality_one"    # pipe to convert for filesize reduction
    dwebp '{}' -o - | convert - -quality $QUALITY_TWO% "$jpg_out_quality_two"    # pipe to convert for filesize reduction
    
fi
'
