#!/usr/bin/env bash
# Purpose - Export a man page to various file formats
# Example name: manx
# Usage: manx bash
# Files output:
#   man.bash.pandoc.html5.html
#   man.bash.pandoc.html.html
#   man.bash.groff.html
#   man.bash.manly.html
#   man.bash.man.troff.ps
#   man.bash.gs.pdf
#   man.bash.gs.inverted.pdf

# Deps manly gs pandoc gzip
# git clone https://gitlab.com/es20490446e/manly.git
# cd manly && ./install-uninstall.sh
# sudo pacman -S --needed gs pandoc gzip


Man_Filepath="$(man --path "$1")"
[ -f "$Man_Filepath" ] || exit 1


# User defined variables
File_Browser=dolphin        # Comment or remove value to disable opening output dir
Open_Text=codium            # Comment or remove value to disable opening text file
#Open_PDF=chromium          # Comment or remove value to disable opening pdf files
Open_Html=chromium          # Comment or remove value to disable opening html files
#Open_PS=okular             # Comment or remove value to disable opening ps files
Text_File_Output_Lines_Length=3000
ManualToRetrieve="$1"
SaveDir="$HOME/Documents/Manuals/"
FilenamesPrefix="man."


# rest of script
mkdir -p "$SaveDir/$1/"
SaveDir="$SaveDir$1/"
out="$SaveDir""$FilenamesPrefix""$1"


File_Browser=$(which $File_Browser 2>/dev/null)
Open_Text=$(which $Open_Text 2>/dev/null)
Open_PDF=$(which $Open_PDF 2>/dev/null)
Open_Html="$(which $Open_Html 2>/dev/null)"
Open_PS=$(which $Open_PS 2>/dev/null)


echo "$out".txt
MANWIDTH=$Text_File_Output_Lines_Length man $ManualToRetrieve | col -bx > "$out".txt && [ -f $Open_Text ] || $Open_Text "$out".txt


#echo "$out".pandoc.html5.html
#pandoc --from man --to html5 <<< "$(zcat "$Man_Filepath")" > "$out".pandoc.html5.html
#[ -x "$Open_Html" ] || setsid >/dev/null 2>&1 </dev/null $Open_Html "$out".pandoc.html5.html 2>&1 >/dev/null & 


echo "$out".pandoc.html
pandoc --from man --to html <<< "$(zcat "$Man_Filepath")" > "$out".pandoc.html
[ ! -x "$Open_Html" ] || setsid >/dev/null 2>&1 </dev/null $Open_Html "$out".pandoc.html 2>&1 >/dev/null & 


echo "$out".groff.html
zcat "$Man_Filepath"  | groff -mandoc -Thtml >"$out".groff.html 2>/dev/null
[ ! -x "$Open_Html" ] || setsid >/dev/null 2>&1 </dev/null $Open_Html "$out".groff.html 2>&1 >/dev/null & 


echo "$out".manly.html
zcat "$Man_Filepath" | manly >"$out".manly.html 2>/dev/null
[ ! -x "$Open_Html" ] || setsid >/dev/null 2>&1 </dev/null $Open_Html "$out".manly.html 2>&1 >/dev/null & 


echo "$out".man.troff.ps
man --troff "$1" >"$out".man.troff.ps
[ ! -x "$Open_PS" ] || setsid >/dev/null 2>&1 </dev/null $Open_PS "$out".man.troff.ps 2>&1 >/dev/null & 


echo "$out".gs.pdf
gs -q -o "$out".gs.pdf -sDEVICE=pdfwrite -f "$out".man.troff.ps
[ ! -x "$Open_PDF" ] || setsid >/dev/null 2>&1 </dev/null $Open_PDF "$out".gs.pdf 2>&1 >/dev/null & 


echo "$out".man.troff.inverted.ps
perl -pe 's/%!PS-Adobe-3.0 Resource-ProcSet\K/\n\{1 exch sub\} settransfer/gm' <"$out".man.troff.ps >"$out".man.troff.inverted.ps
[ ! -x "$Open_PS" ] || setsid >/dev/null 2>&1 </dev/null $Open_PS "$out".man.troff.inverted.ps 2>&1 >/dev/null & 


echo "$out".gs.inverted.pdf
gs -q -o "$out".gs.inverted.pdf -sDEVICE=pdfwrite -f "$out".man.troff.inverted.ps 2>/dev/null
[ ! -x "$Open_PDF" ] || setsid >/dev/null 2>&1 </dev/null $Open_PDF "$out".gs.inverted.pdf 2>&1 >/dev/null & 


[ ! -x "$File_Browser" ] || setsid >/dev/null 2>&1 </dev/null $File_Browser "$SaveDir" 2>&1 >/dev/null & 
