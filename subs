#!/usr/bin/env bash
# Download and search youtube subs
# deps yt-dlp and any one or more of either ugrep, ripgrep, grep

main() {
    url="$@"
    check_if_url
    get_video_id
    search_newest_matching_files
    check_if_files_already_downloaded
    download_subs
    find_downloaded_files
    read_and_format_files
    echo_formated_description_file
    user_search
}


# Iterate over the array and add items to the new array if they match the regex
check_if_url() {
    local regex='^https://[^[:space:]]+$'
        if ! [[ $url =~ $regex ]]; then
            echo "Invalid input. Valid input is a url matching regex ${regex}"
            exit 1
        fi
}


get_video_id() {
    video_id=$(echo "$url" | sed -n 's/.*v=\([^&]*\).*/\1/p')
}


search_newest_matching_files() {
    # Find newest file matching the video_id
    vtt_file_matching_video_id="$(  /usr/bin/ls -t --time=creation "$PWD"/*${video_id}*\.vtt 2>/dev/null | head -n 1  )"
    description_file_matching_video_id="$(  /usr/bin/ls -t --time=creation "$PWD"/*${video_id}*\.description 2>/dev/null | head -n 1  )"
}


check_if_files_already_downloaded() {
    if [ -n "$vtt_file_matching_video_id" ] && [ -n "$description_file_matching_video_id" ]; then
      download=0
    else
      download=1
    fi
}


download_subs() {
    if [ "$download" -eq 1 ]; then
        yt-dlp --restrict-filenames --write-auto-sub --skip-download "${url}"
        yt-dlp --restrict-filenames --sub-langs=eng --write-subs --skip-download "${url}"
        yt-dlp --restrict-filenames --write-description --skip-download "${url}"
    fi
}


find_downloaded_files() {
    if [ "$download" -eq 1 ]; then
        # Search files again since they were just downloaded
        search_newest_matching_files
        transcript_file="$vtt_file_matching_video_id"
        description_file="$description_file_matching_video_id"
    else
        transcript_file="$vtt_file_matching_video_id"
        description_file="$description_file_matching_video_id"
    fi
}


read_and_format_files() {
    formated_description_file="$(  cat "${description_file}" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:] \n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'  )"
    formated_transcript_file="$(  cat "${transcript_file}" | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]:. \n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'  )"
}


echo_formated_description_file() {
    echo "${formated_description_file}"
}


user_search() {
    read -rp "Enter regex (read as raw input): " search_term

    : ${app_count:=0}

    if command -v ug >/dev/null 2>&1; then
        echo
        echo
        echo
        echo
        echo "Ugrep output"
        ug -B2 -A1 -i -Z+-~1 "${search_term}" <<<"$formated_transcript_file"
        ((app_count++))
    fi

    if command -v rg >/dev/null 2>&1; then
        echo
        echo
        echo
        echo
        echo "Ripgrep output"
        rg -iP -B2 -A1 "${search_term}" <<<"$formated_transcript_file"
        ((app_count++))
    fi
    
    if [ "$app_count" -eq 0 ]; then
        echo
        echo
        echo
        echo
        echo "Grep output"
        grep -iP -B2 -A1 "${search_term}" <<<"$formated_transcript_file"
        echo
        echo
        echo "Consider installing ripgrep and ugrep for better search"
        ((app_count++))
    fi
}


main "$@"

